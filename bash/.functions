#!/bin/bash

# set terminal title
function title() {
  echo -en "\033]2;$1\007";
}

# Get process info related to the supplied port
function whoport() {
  lsof -i :$1
}

#prepend to PATH environment variable
function prepend-path() {
    [ -d $1 ] && PATH="$1:$PATH"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Extract many types of compress files
# Source: http://nparikh.org/notes/zshrc.txt
function extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)  tar -jxvf "$1"                        ;;
            *.tar.gz)   tar -zxvf "$1"                        ;;
            *.bz2)      bunzip2 "$1"                          ;;
            *.dmg)      hdiutil mount "$1"                    ;;
            *.gz)       gunzip "$1"                           ;;
            *.tar)      tar -xvf "$1"                         ;;
            *.tbz2)     tar -jxvf "$1"                        ;;
            *.tgz)      tar -zxvf "$1"                        ;;
            *.zip)      unzip "$1"                            ;;
            *.ZIP)      unzip "$1"                            ;;
            *.pax)      cat "$1" | pax -r                     ;;
            *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
            *.Z)        uncompress "$1"                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file to extract"
    fi
}

function alias-new() {
    lastcomment=$(history | tail -n2 | head -n1 | awk '{$1="";print $0}' | sed 's/^ *//g')
    printf "\nalias $1=\"$lastcomment \"" >> $HOME/dotfiles/bash/.${2}
}

function alias-new-personal() {
    alias-new $1 bash_aliases
}

function alias-new-office() {
    alias-new $1 bash_office
}

function alias-modify-office() {
    sed --in-place "/^alias $1/d" $HOME/dotfiles/bash/.bash_office
    alias-new-office $1
}

function alias-modify-personal() {
    sed --in-place "/^alias $1/d" $HOME/dotfiles/bash/.bash_aliases
    alias-new-personal $1
}

function git-move-commit-new-branch() {
    if [ "$#" -ne 2 ]; then
        echo "This requires 2 arguments"
        echo "1st is the new branch name"
        echo "2nd is the number of commits to go back to"
    fi
    git branch $1
    git reset --hard HEAD~$2
    git checkout $1
}

function cheat ()
{
    local topic="$1";
    shift;
    local query="$*";
    curl "cht.sh/${topic}/${query// /+}"
}
